{"version":3,"sources":["logo.svg","components/eventInfo.js","components/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","eventArr","title","date","description","Banner","className","href","React","Component","MainSpace","Events","map","x","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oJAAAA,EAAOC,QAAU,IAA0B,kC,iJCwB5BC,EAvBE,CACf,CACEC,MAAO,kBACPC,KAAM,YACNC,YAAa,gHAGf,CACEF,MAAO,yBACPC,KAAM,WACNC,YAAa,2KAEf,CACEF,MAAO,iCACPC,KAAM,WACNC,YAAa,qEAEf,CACEF,MAAO,yCACPC,KAAM,YACNC,YAAa,0IChBXC,E,iLAEF,OACC,yBAAKC,UAAU,UACnB,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,YAAd,IAA2B,uBAAGA,UAAU,WAAWC,KAAK,KAAI,uBAAGD,UAAU,gBAA9C,qBAC3B,wBAAIA,UAAU,YAAW,uBAAGA,UAAU,WAAWC,KAAK,KAAI,uBAAGD,UAAU,iBAA9C,sBACzB,wBAAIA,UAAU,YAAW,uBAAGA,UAAU,WAAWC,KAAK,KAAI,uBAAGD,UAAU,iBAA9C,4BACzB,wBAAIA,UAAU,YAAW,uBAAGA,UAAU,WAAWC,KAAK,KAAI,uBAAGD,UAAU,uBAA9C,eACzB,wBAAIA,UAAU,YAAW,uBAAGA,UAAU,WAAWC,KAAK,KAAI,uBAAGD,UAAU,kBAA9C,mBAM/B,yBAAKA,UAAU,YACd,yBAAKA,UAAU,QAAf,uB,GAlBmBE,IAAMC,WA4BrBC,E,iLAEF,OACE,yBAAKJ,UAAU,aAAf,c,GAHkBE,IAAMC,WAYxBE,E,iLAEF,OACE,yBAAKL,UAAU,mBACZL,EAASW,KAAI,SAAAC,GAAC,OAEb,yBAAKP,UAAU,iBACb,yBAAKA,UAAU,aAAaO,EAAEX,OAC9B,yBAAKI,UAAU,YAAYO,EAAEV,MAC7B,yBAAKG,UAAU,YAAYO,EAAET,aAC7B,sC,GAVSI,IAAMC,WC7BZK,MAVf,WACE,OACE,yBAAKR,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6cf000ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nconst eventArr = [\n  {\n    title: \"Ted Talk: React\",\n    date: '27 Mar 20',\n    description: \"This talk is for not for everyone.  Your minds will be blown so be sure to consult a doctor before attending\"\n\n  },\n  {\n    title: \"Simon's Skills Session\",\n    date: '2 Apr 20',\n    description: \"In this session Simon will be continuing his React Skills series. The focus will be on hooks. Before attending learn the basics. This talk will discuss implementations\"\n  },\n  {\n    title: \"Beginner talk.  What is React?\",\n    date: '9 Apr 20',\n    description: \"Like the title says, not sure what you're doing?  This is for you\"\n  },\n  {\n    title: \"Speaker from the industry - Tony Stark\",\n    date: '20 Apr 20',\n    description: \"We are continuing or industry guest speaker night. This week we have an up and coming renaissance man. Stark industries currently... \"\n  },\n]\nexport default eventArr;\n\n\n\n","import React from 'react';\nimport eventArr from './eventInfo.js'; \n\n\n\nclass Banner extends React.Component {\n  render() {\n    return (\n     <div className=\"banner\">\n\t<nav className=\"navbar navbar-expand-sm \">\n\t  <div className=\"container-fluid\">\n\t    <ul className=\"navbar-nav\">\n\t      <li className=\"nav-item\" > <a className=\"nav-link\" href=\"#\"><i className=\"fa fa-slack\" ></i>Join us on Slack</a></li>\n\t      <li className=\"nav-item\"><a className=\"nav-link\" href=\"#\"><i className=\"fa fa-meetup\" ></i>Join us on Meetup</a></li>\n\t      <li className=\"nav-item\"><a className=\"nav-link\" href=\"#\"><i className=\"fa fa-github\" ></i>Contribute to this site</a></li>\n\t      <li className=\"nav-item\"><a className=\"nav-link\" href=\"#\"><i className=\"fa fa-youtube-play\" ></i>Tech Talks</a></li>\n\t      <li className=\"nav-item\"><a className=\"nav-link\" href=\"#\"><i className=\"fa fa-comment\" ></i>Give a Talk</a></li>\n\n\n\t    </ul>\n\t  </div>\n\t</nav>\n\t<div className=\"MainText\">\n\t\t<div className=\"Text\">Toronto React</div>\n\t</div>\n\n</div>\n \n\n    );\n  }\n}\n\nclass MainSpace extends React.Component{\n  render() {\n    return (\n      <div className=\"container\">\n        Events\n      </div>\n        \n    )\n  }\n}\n\n\nclass Events extends React.Component{\n  render() {\n    return (\n      <div className=\"eventsContainer\">\n        {eventArr.map(x => (\n          \n          <div className=\"cardContainer\">\n            <div className=\"cardTitle\">{x.title}</div>\n            <div className=\"cardDate\">{x.date}</div>\n            <div className=\"cardDesc\">{x.description}</div>\n            <hr />\n          </div>\n        )\n        )}\n\n      </div>\n        \n    )\n  }\n}\n\n\nexport {Banner, MainSpace, Events};\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Banner, MainSpace, Events} from './components/components.js';\n\n\nfunction App() {\n  return (\n    <div className=\"body\">\n      <Banner />\n      <MainSpace />\n      <Events />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}